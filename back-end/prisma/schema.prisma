// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models =>

model Visitors {
  id             String   @id @default(uuid())
  name           String
  mobile         BigInt
  email          String
  places         String[]
  whenToVisit    String   @map("when_to_visit")
  isValidVisitor Boolean  @map("is_valid_visitor")
  createdAt      DateTime @default(now()) @map("created_at")
  Users          Users?

  @@map("visitors")
}

model Users {
  id        String   @id @default(uuid())
  name      String
  mobile    BigInt
  email     String
  createdAt DateTime @default(now()) @map("created_at")
  visitor   Visitors @relation(fields: [visitorId], references: [id])
  visitorId String   @unique @map("visitor_id")

  @@map("users")
}

enum UserRole {
  master
  admin
  employee
  guest
}

model AdminUsers {
  id        String   @id @default(uuid())
  name String
  email String @unique
  role UserRole
  password String
  createdAt DateTime @default(now()) @map("created_at")
  @@map("admin_users")
}

model Locations {
  id           String   @id @default(uuid())
  name         String
  bestTime     String @map("best_time")
  createdAt    DateTime @default(now()) @map("created_at")
  places       Places[]
  @@map("locations")
}

model Places {
  id            String   @id @default(uuid())
  name          String
  timeToVisit   String @map("time_to_visit")
  description   String
  locationId    String @map("location_id")
  location      Locations @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt     DateTime @default(now()) @map("created_at")
  @@map("places")
}
